// App.js (React Native Front-end)

import React, { useState, useEffect } from 'react';
import { View, Text, Button, FlatList, TextInput, StyleSheet, Modal } from 'react-native';
import axios from 'axios';
import auth from '@react-native-firebase/auth';

const App = () => {
  const [livros, setLivros] = useState([]);
  const [pesquisa, setPesquisa] = useState('');
  const [livroSelecionado, setLivroSelecionado] = useState(null);
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [usuarioLogado, setUsuarioLogado] = useState(false);

  // Carregar livros da API remota (Servidor Express)
  const loadLivros = async () => {
    try {
      const response = await axios.get('http://localhost:3000/livros'); // A URL da sua API
      setLivros(response.data);
    } catch (error) {
      console.error('Erro ao carregar livros da API', error);
    }
  };

  // Função de login com Firebase
  const loginUsuario = async () => {
    try {
      await auth().signInWithEmailAndPassword(email, senha);
      console.log('Usuário logado com sucesso!');
      setUsuarioLogado(true);
    } catch (error) {
      console.error('Erro ao fazer login:', error.message);
    }
  };

  // Função de logout com Firebase
  const logoutUsuario = async () => {
    try {
      await auth().signOut();
      console.log('Usuário deslogado com sucesso!');
      setUsuarioLogado(false);
    } catch (error) {
      console.error('Erro ao deslogar:', error.message);
    }
  };

  // Filtrar livros pela pesquisa
  const filtrarLivros = () => {
    if (pesquisa.trim() === '') {
      return livros;
    }
    return livros.filter((livro) =>
      livro.titulo.toLowerCase().includes(pesquisa.toLowerCase())
    );
  };

  // Função para pegar emprestado
  const pegarEmprestado = (livro) => {
    if (livro.status === 'Disponível') {
      const updatedLivros = livros.map((item) => {
        if (item.id === livro.id) {
          return { ...item, status: 'Emprestado' };
        }
        return item;
      });
      setLivros(updatedLivros);
    }
  };

  useEffect(() => {
    if (usuarioLogado) {
      loadLivros(); // Carregar livros após login
    }
  }, [usuarioLogado]);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Biblioteca Comunitária</Text>

      {/* Login */}
      {!usuarioLogado ? (
        <View>
          <TextInput
            style={styles.input}
            placeholder="Email"
            value={email}
            onChangeText={setEmail}
          />
          <TextInput
            style={styles.input}
            placeholder="Senha"
            secureTextEntry
            value={senha}
            onChangeText={setSenha}
          />
          <Button title="Login" onPress={loginUsuario} />
        </View>
      ) : (
        <Button title="Logout" onPress={logoutUsuario} />
      )}

      {/* Pesquisa */}
      <TextInput
        style={styles.input}
        placeholder="Pesquisar por título"
        value={pesquisa}
        onChangeText={setPesquisa}
      />
      <Button title="Pesquisar" onPress={() => {}} />

      {/* Lista de Livros */}
      <FlatList
        data={filtrarLivros()}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <View style={styles.bookItem}>
            <Text>{item.titulo}</Text>
            <Text>{item.autor}</Text>
            <Text>Status: {item.status}</Text>
            {item.status === 'Disponível' && (
              <Button title="Pegar Emprestado" onPress={() => pegarEmprestado(item)} />
            )}
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  input: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    margin: 10,
    paddingLeft: 10,
    width: '80%',
  },
  bookItem: {
    padding: 10,
    margin: 5,
    backgroundColor: '#f9f9f9',
    width: '80%',
  },
});

export default App;
